
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000726  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800100  00800100  000007ba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103d  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080e  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061f  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007bc  00000000  00000000  00002d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 31       	cpi	r26, 0x1D	; 29
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3a 03 	call	0x674	; 0x674 <main>
  88:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_ADC>:
void init_ADC(void);
uint16_t read_ADC(void);

void init_ADC(void){
	//Set Reference to AVcc and select ADC channel 4
	ADMUX |= (1 << REFS0) | (1 << MUX2);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	84 64       	ori	r24, 0x44	; 68
  98:	80 83       	st	Z, r24
	/*
	 * Enable ADC 
	 * Set prescaler to 128 so input frequency will be 125kHz
	 * Enable ADC Interrupt
	 */
	ADCSRA |= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADIE);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 68       	ori	r24, 0x8F	; 143
  a2:	80 83       	st	Z, r24

	//Enable ADC Noise Reduction Mode
	SMCR |= (1 << SM0);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	83 bf       	out	0x33, r24	; 51
}
  aa:	08 95       	ret

000000ac <read_ADC>:

uint16_t read_ADC(void){
	//Start Conversion
	ADCSRA |= (1 << ADSC);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24

	//Start Sleeping
	SMCR |= (1 << SE);
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	83 bf       	out	0x33, r24	; 51

	return ADC;
  bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c4:	08 95       	ret

000000c6 <setupPWM>:
void setupPWM(void);
void pwm(uint8_t channel, uint16_t onTime, uint16_t period);

//Initializing PWM
void setupPWM(void){
	OC1x_DDR |= (1 << OC1A_PIN) | (1 << OC1B_PIN);
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);	
  cc:	82 ea       	ldi	r24, 0xA2	; 162
  ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  d2:	8a e1       	ldi	r24, 0x1A	; 26
  d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
  d8:	08 95       	ret

000000da <pwm>:

//Set PWM of the selected channel
void pwm(uint8_t channel, uint16_t onTime, uint16_t period){
	ICR1 = period;
  da:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  de:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	29 f4       	brne	.+10     	; 0xf0 <pwm+0x16>
  e6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  ea:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  ee:	08 95       	ret
  f0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f8:	08 95       	ret

000000fa <initUSART>:

void initUSART(void){
   //Set Baud rate; ubrr_value = F_OSC/(16 x Baud_rate) - 1; e.g. 16e6/(9600*16) -1 = 103
	uint32_t ubrr_value;
	ubrr_value = F_CPU/16/BAUD_RATE -1; 
	UBRRL_REG = ubrr_value;
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRRH_REG = (ubrr_value >> 8);
 100:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSRC_REG |= (1 << UCSZ1_BIT) | (1 << UCSZ0_BIT);
 104:	e2 ec       	ldi	r30, 0xC2	; 194
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	86 60       	ori	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
	#ifdef ATMEGA_32A
	UCSRC_REG |= (1 << URSEL_BIT);
	#endif

	//Enable The receiver and transmitter
	UCSRB_REG = (1 << RXEN_BIT) | (1 << TXEN_BIT);
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
 114:	08 95       	ret

00000116 <getCh>:

uint8_t getCh(void){
	while(!(UCSRA_REG & (1 << RXC_BIT)));
 116:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11a:	87 ff       	sbrs	r24, 7
 11c:	fc cf       	rjmp	.-8      	; 0x116 <getCh>
	return UDR_REG;
 11e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 122:	08 95       	ret

00000124 <putCh>:

void putCh(uint8_t data){
	while(!(UCSRA_REG & (1 << UDRE_BIT)));
 124:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 128:	95 ff       	sbrs	r25, 5
 12a:	fc cf       	rjmp	.-8      	; 0x124 <putCh>
	UDR_REG = data;
 12c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 130:	08 95       	ret

00000132 <initIR>:
void initIR(void);
int getPosition(void);
int getError(void);
 
void initIR(void){
	SETUP_IR();
 132:	8a b1       	in	r24, 0x0a	; 10
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	8a b9       	out	0x0a, r24	; 10
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	86 7c       	andi	r24, 0xC6	; 198
 13c:	84 b9       	out	0x04, r24	; 4
	initUSART();
 13e:	0c 94 7d 00 	jmp	0xfa	; 0xfa <initUSART>

00000142 <getPosition>:
}

int getPosition(void){
	int position = IR_POSITION / 2;
 142:	89 b1       	in	r24, 0x09	; 9
 144:	4d 99       	sbic	0x09, 5	; 9
 146:	5c c0       	rjmp	.+184    	; 0x200 <getPosition+0xbe>
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	28 ee       	ldi	r18, 0xE8	; 232
 14c:	33 e0       	ldi	r19, 0x03	; 3
 14e:	92 9f       	mul	r25, r18
 150:	a0 01       	movw	r20, r0
 152:	93 9f       	mul	r25, r19
 154:	50 0d       	add	r21, r0
 156:	11 24       	eor	r1, r1
 158:	4e 99       	sbic	0x09, 6	; 9
 15a:	54 c0       	rjmp	.+168    	; 0x204 <getPosition+0xc2>
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	60 ed       	ldi	r22, 0xD0	; 208
 160:	77 e0       	ldi	r23, 0x07	; 7
 162:	36 9f       	mul	r19, r22
 164:	c0 01       	movw	r24, r0
 166:	37 9f       	mul	r19, r23
 168:	90 0d       	add	r25, r0
 16a:	11 24       	eor	r1, r1
 16c:	9c 01       	movw	r18, r24
 16e:	24 2b       	or	r18, r20
 170:	35 2b       	or	r19, r21
 172:	4f 99       	sbic	0x09, 7	; 9
 174:	49 c0       	rjmp	.+146    	; 0x208 <getPosition+0xc6>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	68 eb       	ldi	r22, 0xB8	; 184
 17a:	7b e0       	ldi	r23, 0x0B	; 11
 17c:	46 9f       	mul	r20, r22
 17e:	c0 01       	movw	r24, r0
 180:	47 9f       	mul	r20, r23
 182:	90 0d       	add	r25, r0
 184:	11 24       	eor	r1, r1
 186:	82 2b       	or	r24, r18
 188:	93 2b       	or	r25, r19
 18a:	1d 99       	sbic	0x03, 5	; 3
 18c:	3f c0       	rjmp	.+126    	; 0x20c <getPosition+0xca>
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	60 ea       	ldi	r22, 0xA0	; 160
 192:	7f e0       	ldi	r23, 0x0F	; 15
 194:	46 9f       	mul	r20, r22
 196:	90 01       	movw	r18, r0
 198:	47 9f       	mul	r20, r23
 19a:	30 0d       	add	r19, r0
 19c:	11 24       	eor	r1, r1
 19e:	82 2b       	or	r24, r18
 1a0:	93 2b       	or	r25, r19
 1a2:	1b 99       	sbic	0x03, 3	; 3
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <getPosition+0xce>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	68 e8       	ldi	r22, 0x88	; 136
 1aa:	73 e1       	ldi	r23, 0x13	; 19
 1ac:	46 9f       	mul	r20, r22
 1ae:	90 01       	movw	r18, r0
 1b0:	47 9f       	mul	r20, r23
 1b2:	30 0d       	add	r19, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	28 2b       	or	r18, r24
 1b8:	39 2b       	or	r19, r25
 1ba:	1c 99       	sbic	0x03, 4	; 3
 1bc:	2b c0       	rjmp	.+86     	; 0x214 <getPosition+0xd2>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	60 e7       	ldi	r22, 0x70	; 112
 1c2:	77 e1       	ldi	r23, 0x17	; 23
 1c4:	46 9f       	mul	r20, r22
 1c6:	c0 01       	movw	r24, r0
 1c8:	47 9f       	mul	r20, r23
 1ca:	90 0d       	add	r25, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	28 2b       	or	r18, r24
 1d0:	39 2b       	or	r19, r25
 1d2:	18 99       	sbic	0x03, 0	; 3
 1d4:	21 c0       	rjmp	.+66     	; 0x218 <getPosition+0xd6>
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	6c ea       	ldi	r22, 0xAC	; 172
 1da:	7d e0       	ldi	r23, 0x0D	; 13
 1dc:	46 9f       	mul	r20, r22
 1de:	c0 01       	movw	r24, r0
 1e0:	47 9f       	mul	r20, r23
 1e2:	90 0d       	add	r25, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	82 2b       	or	r24, r18
 1e8:	93 2b       	or	r25, r19

	if(position > 7000){
 1ea:	89 35       	cpi	r24, 0x59	; 89
 1ec:	2b e1       	ldi	r18, 0x1B	; 27
 1ee:	92 07       	cpc	r25, r18
 1f0:	34 f0       	brlt	.+12     	; 0x1fe <getPosition+0xbc>
		while(position >= 7000){
			position /= 2;
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
		while(position >= 7000){
 1f6:	88 35       	cpi	r24, 0x58	; 88
 1f8:	2b e1       	ldi	r18, 0x1B	; 27
 1fa:	92 07       	cpc	r25, r18
 1fc:	d4 f7       	brge	.-12     	; 0x1f2 <getPosition+0xb0>
		}
	}

	return position;

}
 1fe:	08 95       	ret
	int position = IR_POSITION / 2;
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	a3 cf       	rjmp	.-186    	; 0x14a <getPosition+0x8>
 204:	34 e0       	ldi	r19, 0x04	; 4
 206:	ab cf       	rjmp	.-170    	; 0x15e <getPosition+0x1c>
 208:	48 e0       	ldi	r20, 0x08	; 8
 20a:	b6 cf       	rjmp	.-148    	; 0x178 <getPosition+0x36>
 20c:	40 e1       	ldi	r20, 0x10	; 16
 20e:	c0 cf       	rjmp	.-128    	; 0x190 <getPosition+0x4e>
 210:	40 e2       	ldi	r20, 0x20	; 32
 212:	ca cf       	rjmp	.-108    	; 0x1a8 <getPosition+0x66>
 214:	40 e4       	ldi	r20, 0x40	; 64
 216:	d4 cf       	rjmp	.-88     	; 0x1c0 <getPosition+0x7e>
 218:	40 e8       	ldi	r20, 0x80	; 128
 21a:	de cf       	rjmp	.-68     	; 0x1d8 <getPosition+0x96>

0000021c <getError>:

int getError(void){
	return 3500 - getPosition();
 21c:	0e 94 a1 00 	call	0x142	; 0x142 <getPosition>
 220:	2c ea       	ldi	r18, 0xAC	; 172
 222:	3d e0       	ldi	r19, 0x0D	; 13
 224:	a9 01       	movw	r20, r18
 226:	48 1b       	sub	r20, r24
 228:	59 0b       	sbc	r21, r25
 22a:	ca 01       	movw	r24, r20
 22c:	08 95       	ret

0000022e <init_SRF05>:
void init_SRF05(void);
void SRF05_CalcDistance(void);

void init_SRF05(void){
	//CTC mode
	TCCR0A |= (1 << WGM01);
 22e:	84 b5       	in	r24, 0x24	; 36
 230:	82 60       	ori	r24, 0x02	; 2
 232:	84 bd       	out	0x24, r24	; 36
	OCR0A = 19;
 234:	83 e1       	ldi	r24, 0x13	; 19
 236:	87 bd       	out	0x27, r24	; 39

	//COmpare match interrupt enable
	TIMSK0 |= (1 << OCIE0A);
 238:	ee e6       	ldi	r30, 0x6E	; 110
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24

	//External interrupt enable
	EIMSK |= (1 << INT0);
 242:	e8 9a       	sbi	0x1d, 0	; 29

	SRF05_DDR |= (1 << TRIG);
 244:	53 9a       	sbi	0x0a, 3	; 10
	SRF05_DDR &= ~(1 << ECHO);
 246:	52 98       	cbi	0x0a, 2	; 10
}
 248:	08 95       	ret

0000024a <SRF05_Start>:

void SRF05_Start(void){
	
	mseconds = 0;
 24a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mseconds+0x1>
 24e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mseconds>
	TCNT0 = 0; //Reset timer0
 252:	16 bc       	out	0x26, r1	; 38

	//Trigger for 12us
	SRF05_PORT |= (1 << TRIG);
 254:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	80 e4       	ldi	r24, 0x40	; 64
 258:	8a 95       	dec	r24
 25a:	f1 f7       	brne	.-4      	; 0x258 <SRF05_Start+0xe>
	_delay_us(12);
	SRF05_PORT &= ~(1 << TRIG);
 25c:	5b 98       	cbi	0x0b, 3	; 11

	//Interrupt on rising edge
	EICRA = (1 << ISC01) | (1 << ISC00);
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

	sei();
 264:	78 94       	sei
}
 266:	08 95       	ret

00000268 <__vector_1>:

ISR(INT0_vect){
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31

	if(interrupt == 0){
 28a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <interrupt>
 28e:	81 11       	cpse	r24, r1
 290:	1a c0       	rjmp	.+52     	; 0x2c6 <__vector_1+0x5e>
		//Start Timer
		TCCR0B |= (1 << CS01);
 292:	85 b5       	in	r24, 0x25	; 37
 294:	82 60       	ori	r24, 0x02	; 2
 296:	85 bd       	out	0x25, r24	; 37

		//Interrupt on falling edge
		EICRA = (1 << ISC01);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

		interrupt = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <interrupt>

		interrupt = 0;
		distance = mseconds / 58;
		SRF05_Start();
	}
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti
		TCCR0B &= ~(1 << CS01);
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	85 bd       	out	0x25, r24	; 37
		interrupt = 0;
 2cc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <interrupt>
		distance = mseconds / 58;
 2d0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mseconds>
 2d4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <mseconds+0x1>
 2d8:	6a e3       	ldi	r22, 0x3A	; 58
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__udivmodhi4>
 2e0:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <distance+0x1>
 2e4:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <distance>
		SRF05_Start();
 2e8:	0e 94 25 01 	call	0x24a	; 0x24a <SRF05_Start>
}
 2ec:	db cf       	rjmp	.-74     	; 0x2a4 <__vector_1+0x3c>

000002ee <__vector_14>:

ISR(TIMER0_COMPA_vect){
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
	mseconds += 10;
 2fc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mseconds>
 300:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <mseconds+0x1>
 304:	0a 96       	adiw	r24, 0x0a	; 10
 306:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <mseconds+0x1>
 30a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mseconds>
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <setupMotor>:

void controlMotor(void);
void setupMotor(void);

void setupMotor(void){
	MOTOR_DDR = 0x0F;
 31c:	8f e0       	ldi	r24, 0x0F	; 15
 31e:	87 b9       	out	0x07, r24	; 7
	ICR1 = period;
 320:	e6 e8       	ldi	r30, 0x86	; 134
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 ed       	ldi	r24, 0xD0	; 208
 326:	97 e0       	ldi	r25, 0x07	; 7
 328:	91 83       	std	Z+1, r25	; 0x01
 32a:	80 83       	st	Z, r24
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 32c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 330:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 334:	91 83       	std	Z+1, r25	; 0x01
 336:	80 83       	st	Z, r24
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 338:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 33c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	pwm(CH_A, 0, MAX_SPEED);
	pwm(CH_B, 0, MAX_SPEED);

	//controlMotor(NEUTRAL);
}
 340:	08 95       	ret

00000342 <controlMotor>:

void controlMotor(){
 342:	cf 93       	push	r28

	count++;
 344:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <count>
 348:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <count+0x1>
 34c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <count+0x2>
 350:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <count+0x3>
 354:	4f 5f       	subi	r20, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255
 358:	6f 4f       	sbci	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <count>
 360:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <count+0x1>
 364:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <count+0x2>
 368:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <count+0x3>
	uint8_t ir_val = IR_ARR_VAL;
 36c:	c9 b1       	in	r28, 0x09	; 9
 36e:	c2 95       	swap	r28
 370:	c1 70       	andi	r28, 0x01	; 1
 372:	4d 99       	sbic	0x09, 5	; 9
 374:	c9 c0       	rjmp	.+402    	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	c8 2b       	or	r28, r24
 37a:	4e 99       	sbic	0x09, 6	; 9
 37c:	c7 c0       	rjmp	.+398    	; 0x50c <__FUSE_REGION_LENGTH__+0x10c>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	c8 2b       	or	r28, r24
 382:	4f 99       	sbic	0x09, 7	; 9
 384:	c5 c0       	rjmp	.+394    	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	c8 2b       	or	r28, r24
 38a:	1d 99       	sbic	0x03, 5	; 3
 38c:	c3 c0       	rjmp	.+390    	; 0x514 <__FUSE_REGION_LENGTH__+0x114>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	c8 2b       	or	r28, r24
 392:	1b 99       	sbic	0x03, 3	; 3
 394:	c1 c0       	rjmp	.+386    	; 0x518 <__FUSE_REGION_LENGTH__+0x118>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	c8 2b       	or	r28, r24
 39a:	1c 99       	sbic	0x03, 4	; 3
 39c:	bf c0       	rjmp	.+382    	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	c8 2b       	or	r28, r24
 3a2:	18 99       	sbic	0x03, 0	; 3
 3a4:	bd c0       	rjmp	.+378    	; 0x520 <__FUSE_REGION_LENGTH__+0x120>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	c8 2b       	or	r28, r24

	if(count == 7000){
 3aa:	48 35       	cpi	r20, 0x58	; 88
 3ac:	5b 41       	sbci	r21, 0x1B	; 27
 3ae:	61 05       	cpc	r22, r1
 3b0:	71 05       	cpc	r23, r1
 3b2:	81 f4       	brne	.+32     	; 0x3d4 <controlMotor+0x92>
		putCh(distance);
 3b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <distance>
 3b8:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
		putCh(distance >> 8);
 3bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <distance+0x1>
 3c0:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
		count = 0;
 3c4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
 3c8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
 3cc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count+0x2>
 3d0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count+0x3>
	}

	int error = getError();
 3d4:	0e 94 0e 01 	call	0x21c	; 0x21c <getError>
	P = error;
 3d8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <P+0x1>
 3dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <P>
	I +=  error;
 3e0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <I>
 3e4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <I+0x1>
 3e8:	28 0f       	add	r18, r24
 3ea:	39 1f       	adc	r19, r25
 3ec:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <I+0x1>
 3f0:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <I>
	D = error - previous_error;
 3f4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <previous_error>
 3f8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <previous_error+0x1>
 3fc:	ac 01       	movw	r20, r24
 3fe:	42 1b       	sub	r20, r18
 400:	53 0b       	sbc	r21, r19
 402:	9a 01       	movw	r18, r20
 404:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <D+0x1>
 408:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <D>
	previous_error = error;
 40c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <previous_error+0x1>
 410:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <previous_error>

	PID = Kp * P + Ki * I + Kd * D;
 414:	6b e1       	ldi	r22, 0x1B	; 27
 416:	68 9f       	mul	r22, r24
 418:	a0 01       	movw	r20, r0
 41a:	69 9f       	mul	r22, r25
 41c:	50 0d       	add	r21, r0
 41e:	11 24       	eor	r1, r1
 420:	e4 e1       	ldi	r30, 0x14	; 20
 422:	e2 9f       	mul	r30, r18
 424:	b0 01       	movw	r22, r0
 426:	e3 9f       	mul	r30, r19
 428:	70 0d       	add	r23, r0
 42a:	11 24       	eor	r1, r1
 42c:	46 0f       	add	r20, r22
 42e:	57 1f       	adc	r21, r23
 430:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <PID+0x1>
 434:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <PID>

	right_motor_pwm = RIGHT_NORMAL_SPEED + PID;
 438:	9a 01       	movw	r18, r20
 43a:	2c 5e       	subi	r18, 0xEC	; 236
 43c:	3a 4f       	sbci	r19, 0xFA	; 250
 43e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <right_motor_pwm+0x1>
 442:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <right_motor_pwm>
	left_motor_pwm = LEFT_NORMAL_SPEED - PID;
 446:	24 e1       	ldi	r18, 0x14	; 20
 448:	35 e0       	ldi	r19, 0x05	; 5
 44a:	b9 01       	movw	r22, r18
 44c:	64 1b       	sub	r22, r20
 44e:	75 0b       	sbc	r23, r21
 450:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <left_motor_pwm+0x1>
 454:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <left_motor_pwm>

	FORWARD_MODE();
 458:	48 b1       	in	r20, 0x08	; 8
 45a:	45 60       	ori	r20, 0x05	; 5
 45c:	48 b9       	out	0x08, r20	; 8
 45e:	48 b1       	in	r20, 0x08	; 8
 460:	45 7f       	andi	r20, 0xF5	; 245
 462:	48 b9       	out	0x08, r20	; 8

	if(ir_val == 0x00){
 464:	c1 11       	cpse	r28, r1
 466:	bb c0       	rjmp	.+374    	; 0x5de <__FUSE_REGION_LENGTH__+0x1de>
		if(error > 1000 && count2 <= 5){
 468:	89 3e       	cpi	r24, 0xE9	; 233
 46a:	73 e0       	ldi	r23, 0x03	; 3
 46c:	97 07       	cpc	r25, r23
 46e:	0c f4       	brge	.+2      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 470:	59 c0       	rjmp	.+178    	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
 472:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count2>
 476:	86 30       	cpi	r24, 0x06	; 6
 478:	08 f0       	brcs	.+2      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 47a:	9e c0       	rjmp	.+316    	; 0x5b8 <__FUSE_REGION_LENGTH__+0x1b8>
			REVERSE_MODE();
 47c:	88 b1       	in	r24, 0x08	; 8
 47e:	8a 60       	ori	r24, 0x0A	; 10
 480:	88 b9       	out	0x08, r24	; 8
 482:	88 b1       	in	r24, 0x08	; 8
 484:	8a 7f       	andi	r24, 0xFA	; 250
 486:	88 b9       	out	0x08, r24	; 8
	ICR1 = period;
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	97 e0       	ldi	r25, 0x07	; 7
 48c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 490:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 494:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 498:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 49c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4a0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 4a4:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4a8:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	__builtin_avr_delay_cycles(__ticks_dc);
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	51 ee       	ldi	r21, 0xE1	; 225
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	41 50       	subi	r20, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	60 40       	sbci	r22, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
			pwm(CH_A, RIGHT_NORMAL_SPEED, MAX_SPEED);
			pwm(CH_B, LEFT_NORMAL_SPEED, MAX_SPEED);
			_delay_ms(100);
			FORWARD_MODE();
 4be:	48 b1       	in	r20, 0x08	; 8
 4c0:	45 60       	ori	r20, 0x05	; 5
 4c2:	48 b9       	out	0x08, r20	; 8
 4c4:	48 b1       	in	r20, 0x08	; 8
 4c6:	45 7f       	andi	r20, 0xF5	; 245
 4c8:	48 b9       	out	0x08, r20	; 8
	ICR1 = period;
 4ca:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4ce:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 4d2:	4a e8       	ldi	r20, 0x8A	; 138
 4d4:	52 e0       	ldi	r21, 0x02	; 2
 4d6:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4da:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 4de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 4e6:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4ea:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4ee:	8f e3       	ldi	r24, 0x3F	; 63
 4f0:	9c e9       	ldi	r25, 0x9C	; 156
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
			_delay_ms(1000);
			FORWARD_MODE();
			pwm(CH_A, RIGHT_NORMAL_SPEED, MAX_SPEED);
			pwm(CH_B, LEFT_NORMAL_SPEED/2, MAX_SPEED);
			_delay_ms(100);
			count2++;
 4fa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count2>
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <count2>

	count2 = 0;

	pwm(CH_A, right_motor_pwm, MAX_SPEED);
	pwm(CH_B, left_motor_pwm, MAX_SPEED);
 504:	cf 91       	pop	r28
 506:	08 95       	ret
	uint8_t ir_val = IR_ARR_VAL;
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	36 cf       	rjmp	.-404    	; 0x378 <controlMotor+0x36>
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	38 cf       	rjmp	.-400    	; 0x380 <controlMotor+0x3e>
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	3a cf       	rjmp	.-396    	; 0x388 <controlMotor+0x46>
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	3c cf       	rjmp	.-392    	; 0x390 <controlMotor+0x4e>
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	3e cf       	rjmp	.-388    	; 0x398 <controlMotor+0x56>
 51c:	80 e4       	ldi	r24, 0x40	; 64
 51e:	40 cf       	rjmp	.-384    	; 0x3a0 <controlMotor+0x5e>
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	42 cf       	rjmp	.-380    	; 0x3a8 <controlMotor+0x66>
		}else if(error < -1000 && count2 <= 5){
 524:	88 31       	cpi	r24, 0x18	; 24
 526:	9c 4f       	sbci	r25, 0xFC	; 252
 528:	0c f0       	brlt	.+2      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
 52a:	46 c0       	rjmp	.+140    	; 0x5b8 <__FUSE_REGION_LENGTH__+0x1b8>
 52c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <count2>
 530:	86 30       	cpi	r24, 0x06	; 6
 532:	08 f0       	brcs	.+2      	; 0x536 <__FUSE_REGION_LENGTH__+0x136>
 534:	41 c0       	rjmp	.+130    	; 0x5b8 <__FUSE_REGION_LENGTH__+0x1b8>
			REVERSE_MODE();
 536:	88 b1       	in	r24, 0x08	; 8
 538:	8a 60       	ori	r24, 0x0A	; 10
 53a:	88 b9       	out	0x08, r24	; 8
 53c:	88 b1       	in	r24, 0x08	; 8
 53e:	8a 7f       	andi	r24, 0xFA	; 250
 540:	88 b9       	out	0x08, r24	; 8
	ICR1 = period;
 542:	80 ed       	ldi	r24, 0xD0	; 208
 544:	97 e0       	ldi	r25, 0x07	; 7
 546:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 54a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 54e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 552:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 556:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 55a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 55e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 562:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 566:	5f ef       	ldi	r21, 0xFF	; 255
 568:	63 ed       	ldi	r22, 0xD3	; 211
 56a:	70 e3       	ldi	r23, 0x30	; 48
 56c:	51 50       	subi	r21, 0x01	; 1
 56e:	60 40       	sbci	r22, 0x00	; 0
 570:	70 40       	sbci	r23, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__FUSE_REGION_LENGTH__+0x16c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
 576:	00 00       	nop
			FORWARD_MODE();
 578:	48 b1       	in	r20, 0x08	; 8
 57a:	45 60       	ori	r20, 0x05	; 5
 57c:	48 b9       	out	0x08, r20	; 8
 57e:	48 b1       	in	r20, 0x08	; 8
 580:	45 7f       	andi	r20, 0xF5	; 245
 582:	48 b9       	out	0x08, r20	; 8
	ICR1 = period;
 584:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 588:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 58c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 590:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 594:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 598:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 59c:	8a e8       	ldi	r24, 0x8A	; 138
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	91 ee       	ldi	r25, 0xE1	; 225
 5ac:	24 e0       	ldi	r18, 0x04	; 4
 5ae:	81 50       	subi	r24, 0x01	; 1
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	20 40       	sbci	r18, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <__FUSE_REGION_LENGTH__+0x1ae>
 5b6:	9f cf       	rjmp	.-194    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
	ICR1 = period;
 5b8:	80 ed       	ldi	r24, 0xD0	; 208
 5ba:	97 e0       	ldi	r25, 0x07	; 7
 5bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 5c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 5c4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5c8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 5cc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 5d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 5d4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5d8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 5dc:	93 cf       	rjmp	.-218    	; 0x504 <__FUSE_REGION_LENGTH__+0x104>
	if(right_motor_pwm > RIGHT_MAX)
 5de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_motor_pwm>
 5e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_motor_pwm+0x1>
 5e6:	8d 3d       	cpi	r24, 0xDD	; 221
 5e8:	95 40       	sbci	r25, 0x05	; 5
 5ea:	34 f0       	brlt	.+12     	; 0x5f8 <__FUSE_REGION_LENGTH__+0x1f8>
		right_motor_pwm = RIGHT_MAX;
 5ec:	8c ed       	ldi	r24, 0xDC	; 220
 5ee:	95 e0       	ldi	r25, 0x05	; 5
 5f0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <right_motor_pwm+0x1>
 5f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <right_motor_pwm>
	if(left_motor_pwm > LEFT_MAX)
 5f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <left_motor_pwm>
 5fc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <left_motor_pwm+0x1>
 600:	8d 3d       	cpi	r24, 0xDD	; 221
 602:	95 40       	sbci	r25, 0x05	; 5
 604:	34 f0       	brlt	.+12     	; 0x612 <__FUSE_REGION_LENGTH__+0x212>
		left_motor_pwm = LEFT_MAX;
 606:	8c ed       	ldi	r24, 0xDC	; 220
 608:	95 e0       	ldi	r25, 0x05	; 5
 60a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <left_motor_pwm+0x1>
 60e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <left_motor_pwm>
	if(right_motor_pwm < 0)
 612:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <right_motor_pwm>
 616:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <right_motor_pwm+0x1>
 61a:	97 ff       	sbrs	r25, 7
 61c:	04 c0       	rjmp	.+8      	; 0x626 <__FUSE_REGION_LENGTH__+0x226>
		right_motor_pwm = 0;
 61e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <right_motor_pwm+0x1>
 622:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <right_motor_pwm>
	if(left_motor_pwm < 0)
 626:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <left_motor_pwm>
 62a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <left_motor_pwm+0x1>
 62e:	97 ff       	sbrs	r25, 7
 630:	04 c0       	rjmp	.+8      	; 0x63a <__FUSE_REGION_LENGTH__+0x23a>
		left_motor_pwm = 0;
 632:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <left_motor_pwm+0x1>
 636:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <left_motor_pwm>
	count2 = 0;
 63a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count2>
	pwm(CH_A, right_motor_pwm, MAX_SPEED);
 63e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <right_motor_pwm>
 642:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <right_motor_pwm+0x1>
	ICR1 = period;
 646:	80 ed       	ldi	r24, 0xD0	; 208
 648:	97 e0       	ldi	r25, 0x07	; 7
 64a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 64e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 652:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 656:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	pwm(CH_B, left_motor_pwm, MAX_SPEED);
 65a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <left_motor_pwm>
 65e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <left_motor_pwm+0x1>
	ICR1 = period;
 662:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 666:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 66a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 66e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 672:	48 cf       	rjmp	.-368    	; 0x504 <__FUSE_REGION_LENGTH__+0x104>

00000674 <main>:

uint32_t count3 = 0;

int main(void){

	setupPWM();
 674:	0e 94 63 00 	call	0xc6	; 0xc6 <setupPWM>
	setupMotor();
 678:	0e 94 8e 01 	call	0x31c	; 0x31c <setupMotor>
	initIR();
 67c:	0e 94 99 00 	call	0x132	; 0x132 <initIR>
	init_SRF05();
 680:	0e 94 17 01 	call	0x22e	; 0x22e <init_SRF05>
	SRF05_Start();
 684:	0e 94 25 01 	call	0x24a	; 0x24a <SRF05_Start>
	init_ADC();
 688:	0e 94 48 00 	call	0x90	; 0x90 <init_ADC>

	while(1){
		count3++;
 68c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 690:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 694:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 698:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	a1 1d       	adc	r26, r1
 6a0:	b1 1d       	adc	r27, r1
 6a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 6a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 6aa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 6ae:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		controlMotor();
 6b2:	0e 94 a1 01 	call	0x342	; 0x342 <controlMotor>
		if(count3 == 50000){
 6b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 6be:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 6c2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 6c6:	80 35       	cpi	r24, 0x50	; 80
 6c8:	93 4c       	sbci	r25, 0xC3	; 195
 6ca:	a1 05       	cpc	r26, r1
 6cc:	b1 05       	cpc	r27, r1
 6ce:	f1 f6       	brne	.-68     	; 0x68c <main+0x18>
			putCh(6666);
 6d0:	8a e0       	ldi	r24, 0x0A	; 10
 6d2:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
			putCh(6666 >> 8);
 6d6:	8a e1       	ldi	r24, 0x1A	; 26
 6d8:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
			putCh(5555);
 6dc:	83 eb       	ldi	r24, 0xB3	; 179
 6de:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
			putCh(5555 >> 8);
 6e2:	85 e1       	ldi	r24, 0x15	; 21
 6e4:	0e 94 92 00 	call	0x124	; 0x124 <putCh>
			count3 = 0;
 6e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 6ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 6f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 6f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 6f8:	c9 cf       	rjmp	.-110    	; 0x68c <main+0x18>

000006fa <__udivmodhi4>:
 6fa:	aa 1b       	sub	r26, r26
 6fc:	bb 1b       	sub	r27, r27
 6fe:	51 e1       	ldi	r21, 0x11	; 17
 700:	07 c0       	rjmp	.+14     	; 0x710 <__udivmodhi4_ep>

00000702 <__udivmodhi4_loop>:
 702:	aa 1f       	adc	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	a6 17       	cp	r26, r22
 708:	b7 07       	cpc	r27, r23
 70a:	10 f0       	brcs	.+4      	; 0x710 <__udivmodhi4_ep>
 70c:	a6 1b       	sub	r26, r22
 70e:	b7 0b       	sbc	r27, r23

00000710 <__udivmodhi4_ep>:
 710:	88 1f       	adc	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	5a 95       	dec	r21
 716:	a9 f7       	brne	.-22     	; 0x702 <__udivmodhi4_loop>
 718:	80 95       	com	r24
 71a:	90 95       	com	r25
 71c:	bc 01       	movw	r22, r24
 71e:	cd 01       	movw	r24, r26
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>

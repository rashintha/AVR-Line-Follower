
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000724  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001099  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005db  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000830  00000000  00000000  00002c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000034a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 31       	cpi	r26, 0x19	; 25
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 25 03 	call	0x64a	; 0x64a <main>
  88:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setupPWM>:
void setupPWM(void);
void pwm(uint8_t channel, uint16_t onTime, uint16_t period);

//Initializing PWM
void setupPWM(void){
	OC1x_DDR |= (1 << OC1A_PIN) | (1 << OC1B_PIN);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);	
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
}
  a2:	08 95       	ret

000000a4 <pwm>:

//Set PWM of the selected channel
void pwm(uint8_t channel, uint16_t onTime, uint16_t period){
	ICR1 = period;
  a4:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a8:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	29 f4       	brne	.+10     	; 0xba <pwm+0x16>
  b0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  b4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  b8:	08 95       	ret
  ba:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c2:	08 95       	ret

000000c4 <initUSART>:

void initUSART(void){
   //Set Baud rate; ubrr_value = F_OSC/(16 x Baud_rate) - 1; e.g. 16e6/(9600*16) -1 = 103
	uint32_t ubrr_value;
	ubrr_value = F_CPU/16/BAUD_RATE -1; 
	UBRRL_REG = ubrr_value;
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRRH_REG = (ubrr_value >> 8);
  ca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSRC_REG |= (1 << UCSZ1_BIT) | (1 << UCSZ0_BIT);
  ce:	e2 ec       	ldi	r30, 0xC2	; 194
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	#ifdef ATMEGA_32A
	UCSRC_REG |= (1 << URSEL_BIT);
	#endif

	//Enable The receiver and transmitter
	UCSRB_REG = (1 << RXEN_BIT) | (1 << TXEN_BIT);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
  de:	08 95       	ret

000000e0 <getCh>:

uint8_t getCh(void){
	while(!(UCSRA_REG & (1 << RXC_BIT)));
  e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  e4:	87 ff       	sbrs	r24, 7
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <getCh>
	return UDR_REG;
  e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ec:	08 95       	ret

000000ee <putCh>:

void putCh(uint8_t data){
	while(!(UCSRA_REG & (1 << UDRE_BIT)));
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <putCh>
	UDR_REG = data;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  fa:	08 95       	ret

000000fc <initIR>:
void stableCar(void);
uint8_t lineSize(void);
int getPosition(void);
 
void initIR(void){
	SETUP_IR();
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	8a b9       	out	0x0a, r24	; 10
 102:	84 b1       	in	r24, 0x04	; 4
 104:	86 7c       	andi	r24, 0xC6	; 198
 106:	84 b9       	out	0x04, r24	; 4
	initUSART();
 108:	0c 94 62 00 	jmp	0xc4	; 0xc4 <initUSART>

0000010c <getPosition>:
}

int getPosition(void){
	int position = IR_POSITION / 2;
 10c:	89 b1       	in	r24, 0x09	; 9
 10e:	4d 99       	sbic	0x09, 5	; 9
 110:	5c c0       	rjmp	.+184    	; 0x1ca <getPosition+0xbe>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 ee       	ldi	r18, 0xE8	; 232
 116:	33 e0       	ldi	r19, 0x03	; 3
 118:	92 9f       	mul	r25, r18
 11a:	a0 01       	movw	r20, r0
 11c:	93 9f       	mul	r25, r19
 11e:	50 0d       	add	r21, r0
 120:	11 24       	eor	r1, r1
 122:	4e 99       	sbic	0x09, 6	; 9
 124:	54 c0       	rjmp	.+168    	; 0x1ce <getPosition+0xc2>
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	60 ed       	ldi	r22, 0xD0	; 208
 12a:	77 e0       	ldi	r23, 0x07	; 7
 12c:	36 9f       	mul	r19, r22
 12e:	c0 01       	movw	r24, r0
 130:	37 9f       	mul	r19, r23
 132:	90 0d       	add	r25, r0
 134:	11 24       	eor	r1, r1
 136:	9c 01       	movw	r18, r24
 138:	24 2b       	or	r18, r20
 13a:	35 2b       	or	r19, r21
 13c:	4f 99       	sbic	0x09, 7	; 9
 13e:	49 c0       	rjmp	.+146    	; 0x1d2 <getPosition+0xc6>
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	68 eb       	ldi	r22, 0xB8	; 184
 144:	7b e0       	ldi	r23, 0x0B	; 11
 146:	46 9f       	mul	r20, r22
 148:	c0 01       	movw	r24, r0
 14a:	47 9f       	mul	r20, r23
 14c:	90 0d       	add	r25, r0
 14e:	11 24       	eor	r1, r1
 150:	82 2b       	or	r24, r18
 152:	93 2b       	or	r25, r19
 154:	1d 99       	sbic	0x03, 5	; 3
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <getPosition+0xca>
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	60 ea       	ldi	r22, 0xA0	; 160
 15c:	7f e0       	ldi	r23, 0x0F	; 15
 15e:	46 9f       	mul	r20, r22
 160:	90 01       	movw	r18, r0
 162:	47 9f       	mul	r20, r23
 164:	30 0d       	add	r19, r0
 166:	11 24       	eor	r1, r1
 168:	82 2b       	or	r24, r18
 16a:	93 2b       	or	r25, r19
 16c:	1b 99       	sbic	0x03, 3	; 3
 16e:	35 c0       	rjmp	.+106    	; 0x1da <getPosition+0xce>
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	68 e8       	ldi	r22, 0x88	; 136
 174:	73 e1       	ldi	r23, 0x13	; 19
 176:	46 9f       	mul	r20, r22
 178:	90 01       	movw	r18, r0
 17a:	47 9f       	mul	r20, r23
 17c:	30 0d       	add	r19, r0
 17e:	11 24       	eor	r1, r1
 180:	28 2b       	or	r18, r24
 182:	39 2b       	or	r19, r25
 184:	1c 99       	sbic	0x03, 4	; 3
 186:	2b c0       	rjmp	.+86     	; 0x1de <getPosition+0xd2>
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	60 e7       	ldi	r22, 0x70	; 112
 18c:	77 e1       	ldi	r23, 0x17	; 23
 18e:	46 9f       	mul	r20, r22
 190:	c0 01       	movw	r24, r0
 192:	47 9f       	mul	r20, r23
 194:	90 0d       	add	r25, r0
 196:	11 24       	eor	r1, r1
 198:	28 2b       	or	r18, r24
 19a:	39 2b       	or	r19, r25
 19c:	18 99       	sbic	0x03, 0	; 3
 19e:	21 c0       	rjmp	.+66     	; 0x1e2 <getPosition+0xd6>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	6c ea       	ldi	r22, 0xAC	; 172
 1a4:	7d e0       	ldi	r23, 0x0D	; 13
 1a6:	46 9f       	mul	r20, r22
 1a8:	c0 01       	movw	r24, r0
 1aa:	47 9f       	mul	r20, r23
 1ac:	90 0d       	add	r25, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	82 2b       	or	r24, r18
 1b2:	93 2b       	or	r25, r19

	if(position > 7000){
 1b4:	89 35       	cpi	r24, 0x59	; 89
 1b6:	2b e1       	ldi	r18, 0x1B	; 27
 1b8:	92 07       	cpc	r25, r18
 1ba:	34 f0       	brlt	.+12     	; 0x1c8 <getPosition+0xbc>
		while(position >= 7000){
			position /= 2;
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
		while(position >= 7000){
 1c0:	88 35       	cpi	r24, 0x58	; 88
 1c2:	2b e1       	ldi	r18, 0x1B	; 27
 1c4:	92 07       	cpc	r25, r18
 1c6:	d4 f7       	brge	.-12     	; 0x1bc <getPosition+0xb0>
		}
	}

	return position;

}
 1c8:	08 95       	ret
	int position = IR_POSITION / 2;
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	a3 cf       	rjmp	.-186    	; 0x114 <getPosition+0x8>
 1ce:	34 e0       	ldi	r19, 0x04	; 4
 1d0:	ab cf       	rjmp	.-170    	; 0x128 <getPosition+0x1c>
 1d2:	48 e0       	ldi	r20, 0x08	; 8
 1d4:	b6 cf       	rjmp	.-148    	; 0x142 <getPosition+0x36>
 1d6:	40 e1       	ldi	r20, 0x10	; 16
 1d8:	c0 cf       	rjmp	.-128    	; 0x15a <getPosition+0x4e>
 1da:	40 e2       	ldi	r20, 0x20	; 32
 1dc:	ca cf       	rjmp	.-108    	; 0x172 <getPosition+0x66>
 1de:	40 e4       	ldi	r20, 0x40	; 64
 1e0:	d4 cf       	rjmp	.-88     	; 0x18a <getPosition+0x7e>
 1e2:	40 e8       	ldi	r20, 0x80	; 128
 1e4:	de cf       	rjmp	.-68     	; 0x1a2 <getPosition+0x96>

000001e6 <getError>:

int getError(){

	return 3500 - getPosition();
 1e6:	0e 94 86 00 	call	0x10c	; 0x10c <getPosition>

	if(IR01_VAL() && IR02_VAL() && ~IR03_VAL() && ~IR04_VAL() && ~IR05_VAL() && ~IR06_VAL() && ~IR07_VAL() && ~IR08_VAL()) return -6;

	if(IR01_VAL() && ~IR02_VAL() && ~IR03_VAL() && ~IR04_VAL() && ~IR05_VAL() && ~IR06_VAL() && ~IR07_VAL() && ~IR08_VAL()) return -7;
	*/
}
 1ea:	2c ea       	ldi	r18, 0xAC	; 172
 1ec:	3d e0       	ldi	r19, 0x0D	; 13
 1ee:	a9 01       	movw	r20, r18
 1f0:	48 1b       	sub	r20, r24
 1f2:	59 0b       	sbc	r21, r25
 1f4:	ca 01       	movw	r24, r20
 1f6:	08 95       	ret

000001f8 <lineSize>:
}*/

uint8_t lineSize(void){
	uint8_t size = 0;

	if(~IR01_VAL()) size++;
 1f8:	89 b1       	in	r24, 0x09	; 9
	if(~IR02_VAL()) size++;
 1fa:	89 b1       	in	r24, 0x09	; 9
	if(~IR03_VAL()) size++;
 1fc:	89 b1       	in	r24, 0x09	; 9
	if(~IR04_VAL()) size++;
 1fe:	89 b1       	in	r24, 0x09	; 9
	if(~IR05_VAL()) size++;
 200:	83 b1       	in	r24, 0x03	; 3
	if(~IR06_VAL()) size++;
 202:	83 b1       	in	r24, 0x03	; 3
	if(~IR07_VAL()) size++;
 204:	83 b1       	in	r24, 0x03	; 3
	if(~IR08_VAL()) size++;
 206:	83 b1       	in	r24, 0x03	; 3

	return size;
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	08 95       	ret

0000020c <init_SRF05>:
void init_SRF05(void);
void SRF05_CalcDistance(void);

void init_SRF05(void){
	//CTC mode
	TCCR0A |= (1 << WGM01);
 20c:	84 b5       	in	r24, 0x24	; 36
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	84 bd       	out	0x24, r24	; 36
	OCR0A = 19;
 212:	83 e1       	ldi	r24, 0x13	; 19
 214:	87 bd       	out	0x27, r24	; 39

	//COmpare match interrupt enable
	TIMSK0 |= (1 << OCIE0A);
 216:	ee e6       	ldi	r30, 0x6E	; 110
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	80 83       	st	Z, r24

	//External interrupt enable
	EIMSK |= (1 << INT0);
 220:	e8 9a       	sbi	0x1d, 0	; 29

	SRF05_DDR |= (1 << TRIG);
 222:	53 9a       	sbi	0x0a, 3	; 10
	SRF05_DDR &= ~(1 << ECHO);
 224:	52 98       	cbi	0x0a, 2	; 10
}
 226:	08 95       	ret

00000228 <SRF05_Start>:

void SRF05_Start(void){
	
	mseconds = 0;
 228:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mseconds+0x1>
 22c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mseconds>
	TCNT0 = 0; //Reset timer0
 230:	16 bc       	out	0x26, r1	; 38

	//Trigger for 12us
	SRF05_PORT |= (1 << TRIG);
 232:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <SRF05_Start+0xe>
	_delay_us(12);
	SRF05_PORT &= ~(1 << TRIG);
 23a:	5b 98       	cbi	0x0b, 3	; 11

	//Interrupt on rising edge
	EICRA = (1 << ISC01) | (1 << ISC00);
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

	sei();
 242:	78 94       	sei
}
 244:	08 95       	ret

00000246 <__vector_1>:

ISR(INT0_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31

	if(interrupt == 0){
 268:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <interrupt>
 26c:	81 11       	cpse	r24, r1
 26e:	1a c0       	rjmp	.+52     	; 0x2a4 <__vector_1+0x5e>
		//Start Timer
		TCCR0B |= (1 << CS01);
 270:	85 b5       	in	r24, 0x25	; 37
 272:	82 60       	ori	r24, 0x02	; 2
 274:	85 bd       	out	0x25, r24	; 37

		//Interrupt on falling edge
		EICRA = (1 << ISC01);
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

		interrupt = 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <interrupt>

		interrupt = 0;
		distance = mseconds / 58;
		SRF05_Start();
	}
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti
		TCCR0B &= ~(1 << CS01);
 2a4:	85 b5       	in	r24, 0x25	; 37
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	85 bd       	out	0x25, r24	; 37
		interrupt = 0;
 2aa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <interrupt>
		distance = mseconds / 58;
 2ae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mseconds>
 2b2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mseconds+0x1>
 2b6:	6a e3       	ldi	r22, 0x3A	; 58
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 32 03 	call	0x664	; 0x664 <__udivmodhi4>
 2be:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <distance+0x1>
 2c2:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <distance>
		SRF05_Start();
 2c6:	0e 94 14 01 	call	0x228	; 0x228 <SRF05_Start>
}
 2ca:	db cf       	rjmp	.-74     	; 0x282 <__vector_1+0x3c>

000002cc <__vector_14>:

ISR(TIMER0_COMPA_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	mseconds += 10;
 2da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mseconds>
 2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mseconds+0x1>
 2e2:	0a 96       	adiw	r24, 0x0a	; 10
 2e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <mseconds+0x1>
 2e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mseconds>
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <setupMotor>:

void controlMotor(void);
void setupMotor(void);

void setupMotor(void){
	MOTOR_DDR = 0x0F;
 2fa:	8f e0       	ldi	r24, 0x0F	; 15
 2fc:	87 b9       	out	0x07, r24	; 7
	ICR1 = period;
 2fe:	e6 e8       	ldi	r30, 0x86	; 134
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 ed       	ldi	r24, 0xD0	; 208
 304:	97 e0       	ldi	r25, 0x07	; 7
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	80 83       	st	Z, r24
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 30a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 316:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 31a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

	pwm(CH_A, 0, MAX_SPEED);
	pwm(CH_B, 0, MAX_SPEED);

	//controlMotor(NEUTRAL);
}
 31e:	08 95       	ret

00000320 <controlMotor>:

void controlMotor(){
 320:	cf 93       	push	r28

	count++;
 322:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <count>
 326:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <count+0x1>
 32a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <count+0x2>
 32e:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <count+0x3>
 332:	4f 5f       	subi	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	6f 4f       	sbci	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	40 93 0f 01 	sts	0x010F, r20	; 0x80010f <count>
 33e:	50 93 10 01 	sts	0x0110, r21	; 0x800110 <count+0x1>
 342:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <count+0x2>
 346:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <count+0x3>
	uint8_t ir_val = IR_ARR_VAL;
 34a:	c9 b1       	in	r28, 0x09	; 9
 34c:	c2 95       	swap	r28
 34e:	c1 70       	andi	r28, 0x01	; 1
 350:	4d 99       	sbic	0x09, 5	; 9
 352:	c5 c0       	rjmp	.+394    	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	c8 2b       	or	r28, r24
 358:	4e 99       	sbic	0x09, 6	; 9
 35a:	c3 c0       	rjmp	.+390    	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	c8 2b       	or	r28, r24
 360:	4f 99       	sbic	0x09, 7	; 9
 362:	c1 c0       	rjmp	.+386    	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	c8 2b       	or	r28, r24
 368:	1d 99       	sbic	0x03, 5	; 3
 36a:	bf c0       	rjmp	.+382    	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	c8 2b       	or	r28, r24
 370:	1b 99       	sbic	0x03, 3	; 3
 372:	bd c0       	rjmp	.+378    	; 0x4ee <__FUSE_REGION_LENGTH__+0xee>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	c8 2b       	or	r28, r24
 378:	1c 99       	sbic	0x03, 4	; 3
 37a:	bb c0       	rjmp	.+374    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	c8 2b       	or	r28, r24
 380:	18 99       	sbic	0x03, 0	; 3
 382:	b9 c0       	rjmp	.+370    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	c8 2b       	or	r28, r24

	if(count == 200000){
 388:	40 34       	cpi	r20, 0x40	; 64
 38a:	5d 40       	sbci	r21, 0x0D	; 13
 38c:	63 40       	sbci	r22, 0x03	; 3
 38e:	71 05       	cpc	r23, r1
 390:	61 f4       	brne	.+24     	; 0x3aa <controlMotor+0x8a>
		putCh(distance);
 392:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <distance>
 396:	0e 94 77 00 	call	0xee	; 0xee <putCh>
		count = 0;
 39a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <count>
 39e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <count+0x1>
 3a2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count+0x2>
 3a6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count+0x3>
	}

	int error = getError();
 3aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <getError>
	P = error;
 3ae:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <P+0x1>
 3b2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <P>
	I +=  error;
 3b6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <I>
 3ba:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <I+0x1>
 3be:	28 0f       	add	r18, r24
 3c0:	39 1f       	adc	r19, r25
 3c2:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <I+0x1>
 3c6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <I>
	D = error - previous_error;
 3ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 3d2:	ac 01       	movw	r20, r24
 3d4:	42 1b       	sub	r20, r18
 3d6:	53 0b       	sbc	r21, r19
 3d8:	9a 01       	movw	r18, r20
 3da:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <D+0x1>
 3de:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <D>
	previous_error = error;
 3e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	PID = Kp * P + Ki * I + Kd * D;
 3ea:	6b e1       	ldi	r22, 0x1B	; 27
 3ec:	68 9f       	mul	r22, r24
 3ee:	a0 01       	movw	r20, r0
 3f0:	69 9f       	mul	r22, r25
 3f2:	50 0d       	add	r21, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	e4 e1       	ldi	r30, 0x14	; 20
 3f8:	e2 9f       	mul	r30, r18
 3fa:	b0 01       	movw	r22, r0
 3fc:	e3 9f       	mul	r30, r19
 3fe:	70 0d       	add	r23, r0
 400:	11 24       	eor	r1, r1
 402:	46 0f       	add	r20, r22
 404:	57 1f       	adc	r21, r23
 406:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <PID+0x1>
 40a:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <PID>

	right_motor_pwm = RIGHT_NORMAL_SPEED + PID;
 40e:	9a 01       	movw	r18, r20
 410:	2c 5e       	subi	r18, 0xEC	; 236
 412:	3a 4f       	sbci	r19, 0xFA	; 250
 414:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <right_motor_pwm+0x1>
 418:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <right_motor_pwm>
	left_motor_pwm = LEFT_NORMAL_SPEED - PID;
 41c:	24 e1       	ldi	r18, 0x14	; 20
 41e:	35 e0       	ldi	r19, 0x05	; 5
 420:	b9 01       	movw	r22, r18
 422:	64 1b       	sub	r22, r20
 424:	75 0b       	sbc	r23, r21
 426:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <left_motor_pwm+0x1>
 42a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <left_motor_pwm>

	FORWARD_MODE();
 42e:	48 b1       	in	r20, 0x08	; 8
 430:	45 60       	ori	r20, 0x05	; 5
 432:	48 b9       	out	0x08, r20	; 8
 434:	48 b1       	in	r20, 0x08	; 8
 436:	45 7f       	andi	r20, 0xF5	; 245
 438:	48 b9       	out	0x08, r20	; 8

	if(ir_val == 0x00){
 43a:	c1 11       	cpse	r28, r1
 43c:	bb c0       	rjmp	.+374    	; 0x5b4 <__FUSE_REGION_LENGTH__+0x1b4>
		if(error > 1000 && count2 <= 5){
 43e:	89 3e       	cpi	r24, 0xE9	; 233
 440:	73 e0       	ldi	r23, 0x03	; 3
 442:	97 07       	cpc	r25, r23
 444:	0c f4       	brge	.+2      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 446:	59 c0       	rjmp	.+178    	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
 448:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count2>
 44c:	86 30       	cpi	r24, 0x06	; 6
 44e:	08 f0       	brcs	.+2      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
 450:	9e c0       	rjmp	.+316    	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
			REVERSE_MODE();
 452:	88 b1       	in	r24, 0x08	; 8
 454:	8a 60       	ori	r24, 0x0A	; 10
 456:	88 b9       	out	0x08, r24	; 8
 458:	88 b1       	in	r24, 0x08	; 8
 45a:	8a 7f       	andi	r24, 0xFA	; 250
 45c:	88 b9       	out	0x08, r24	; 8
	ICR1 = period;
 45e:	80 ed       	ldi	r24, 0xD0	; 208
 460:	97 e0       	ldi	r25, 0x07	; 7
 462:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 466:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 46a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 46e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 472:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 476:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 47a:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 47e:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	__builtin_avr_delay_cycles(__ticks_dc);
 482:	4f ef       	ldi	r20, 0xFF	; 255
 484:	51 ee       	ldi	r21, 0xE1	; 225
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	41 50       	subi	r20, 0x01	; 1
 48a:	50 40       	sbci	r21, 0x00	; 0
 48c:	60 40       	sbci	r22, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 492:	00 00       	nop
			pwm(CH_A, RIGHT_NORMAL_SPEED, MAX_SPEED);
			pwm(CH_B, LEFT_NORMAL_SPEED, MAX_SPEED);
			_delay_ms(100);
			FORWARD_MODE();
 494:	48 b1       	in	r20, 0x08	; 8
 496:	45 60       	ori	r20, 0x05	; 5
 498:	48 b9       	out	0x08, r20	; 8
 49a:	48 b1       	in	r20, 0x08	; 8
 49c:	45 7f       	andi	r20, 0xF5	; 245
 49e:	48 b9       	out	0x08, r20	; 8
	ICR1 = period;
 4a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 4a8:	4a e8       	ldi	r20, 0x8A	; 138
 4aa:	52 e0       	ldi	r21, 0x02	; 2
 4ac:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4b0:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 4b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 4b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 4bc:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 4c0:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 4c4:	8f e3       	ldi	r24, 0x3F	; 63
 4c6:	9c e9       	ldi	r25, 0x9C	; 156
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
			_delay_ms(1000);
			FORWARD_MODE();
			pwm(CH_A, RIGHT_NORMAL_SPEED, MAX_SPEED);
			pwm(CH_B, LEFT_NORMAL_SPEED/2, MAX_SPEED);
			_delay_ms(100);
			count2++;
 4d0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count2>
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count2>
	}

	pwm(CH_A, channelA, MAX_PWM_SPEED);
	pwm(CH_B, channelB, MAX_PWM_SPEED);
	*/
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret
	uint8_t ir_val = IR_ARR_VAL;
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	3a cf       	rjmp	.-396    	; 0x356 <controlMotor+0x36>
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	3c cf       	rjmp	.-392    	; 0x35e <controlMotor+0x3e>
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	3e cf       	rjmp	.-388    	; 0x366 <controlMotor+0x46>
 4ea:	80 e1       	ldi	r24, 0x10	; 16
 4ec:	40 cf       	rjmp	.-384    	; 0x36e <controlMotor+0x4e>
 4ee:	80 e2       	ldi	r24, 0x20	; 32
 4f0:	42 cf       	rjmp	.-380    	; 0x376 <controlMotor+0x56>
 4f2:	80 e4       	ldi	r24, 0x40	; 64
 4f4:	44 cf       	rjmp	.-376    	; 0x37e <controlMotor+0x5e>
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	46 cf       	rjmp	.-372    	; 0x386 <controlMotor+0x66>
		}else if(error < -1000 && count2 <= 5){
 4fa:	88 31       	cpi	r24, 0x18	; 24
 4fc:	9c 4f       	sbci	r25, 0xFC	; 252
 4fe:	0c f0       	brlt	.+2      	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
 500:	46 c0       	rjmp	.+140    	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
 502:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <count2>
 506:	86 30       	cpi	r24, 0x06	; 6
 508:	08 f0       	brcs	.+2      	; 0x50c <__FUSE_REGION_LENGTH__+0x10c>
 50a:	41 c0       	rjmp	.+130    	; 0x58e <__FUSE_REGION_LENGTH__+0x18e>
			REVERSE_MODE();
 50c:	88 b1       	in	r24, 0x08	; 8
 50e:	8a 60       	ori	r24, 0x0A	; 10
 510:	88 b9       	out	0x08, r24	; 8
 512:	88 b1       	in	r24, 0x08	; 8
 514:	8a 7f       	andi	r24, 0xFA	; 250
 516:	88 b9       	out	0x08, r24	; 8
	ICR1 = period;
 518:	80 ed       	ldi	r24, 0xD0	; 208
 51a:	97 e0       	ldi	r25, 0x07	; 7
 51c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 520:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 524:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 528:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 52c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 530:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 534:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 538:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 53c:	5f ef       	ldi	r21, 0xFF	; 255
 53e:	63 ed       	ldi	r22, 0xD3	; 211
 540:	70 e3       	ldi	r23, 0x30	; 48
 542:	51 50       	subi	r21, 0x01	; 1
 544:	60 40       	sbci	r22, 0x00	; 0
 546:	70 40       	sbci	r23, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
			FORWARD_MODE();
 54e:	48 b1       	in	r20, 0x08	; 8
 550:	45 60       	ori	r20, 0x05	; 5
 552:	48 b9       	out	0x08, r20	; 8
 554:	48 b1       	in	r20, 0x08	; 8
 556:	45 7f       	andi	r20, 0xF5	; 245
 558:	48 b9       	out	0x08, r20	; 8
	ICR1 = period;
 55a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 55e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 562:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 566:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 56a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 56e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 572:	8a e8       	ldi	r24, 0x8A	; 138
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 57a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	91 ee       	ldi	r25, 0xE1	; 225
 582:	24 e0       	ldi	r18, 0x04	; 4
 584:	81 50       	subi	r24, 0x01	; 1
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	20 40       	sbci	r18, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <__FUSE_REGION_LENGTH__+0x184>
 58c:	9f cf       	rjmp	.-194    	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
	ICR1 = period;
 58e:	80 ed       	ldi	r24, 0xD0	; 208
 590:	97 e0       	ldi	r25, 0x07	; 7
 592:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 596:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 59a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 59e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ICR1 = period;
 5a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 5a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 5aa:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 5ae:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 5b2:	93 cf       	rjmp	.-218    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
	if(right_motor_pwm > RIGHT_MAX)
 5b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <right_motor_pwm>
 5b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <right_motor_pwm+0x1>
 5bc:	8d 3d       	cpi	r24, 0xDD	; 221
 5be:	95 40       	sbci	r25, 0x05	; 5
 5c0:	34 f0       	brlt	.+12     	; 0x5ce <__FUSE_REGION_LENGTH__+0x1ce>
		right_motor_pwm = RIGHT_MAX;
 5c2:	8c ed       	ldi	r24, 0xDC	; 220
 5c4:	95 e0       	ldi	r25, 0x05	; 5
 5c6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <right_motor_pwm+0x1>
 5ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <right_motor_pwm>
	if(left_motor_pwm > LEFT_MAX)
 5ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <left_motor_pwm>
 5d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <left_motor_pwm+0x1>
 5d6:	8d 3d       	cpi	r24, 0xDD	; 221
 5d8:	95 40       	sbci	r25, 0x05	; 5
 5da:	34 f0       	brlt	.+12     	; 0x5e8 <__FUSE_REGION_LENGTH__+0x1e8>
		left_motor_pwm = LEFT_MAX;
 5dc:	8c ed       	ldi	r24, 0xDC	; 220
 5de:	95 e0       	ldi	r25, 0x05	; 5
 5e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <left_motor_pwm+0x1>
 5e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <left_motor_pwm>
	if(right_motor_pwm < 0)
 5e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <right_motor_pwm>
 5ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <right_motor_pwm+0x1>
 5f0:	97 ff       	sbrs	r25, 7
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__FUSE_REGION_LENGTH__+0x1fc>
		right_motor_pwm = 0;
 5f4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <right_motor_pwm+0x1>
 5f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <right_motor_pwm>
	if(left_motor_pwm < 0)
 5fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <left_motor_pwm>
 600:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <left_motor_pwm+0x1>
 604:	97 ff       	sbrs	r25, 7
 606:	04 c0       	rjmp	.+8      	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
		left_motor_pwm = 0;
 608:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <left_motor_pwm+0x1>
 60c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <left_motor_pwm>
	count2 = 0;
 610:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <count2>
	pwm(CH_A, right_motor_pwm, MAX_SPEED);
 614:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <right_motor_pwm>
 618:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <right_motor_pwm+0x1>
	ICR1 = period;
 61c:	80 ed       	ldi	r24, 0xD0	; 208
 61e:	97 e0       	ldi	r25, 0x07	; 7
 620:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 624:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 628:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 62c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	pwm(CH_B, left_motor_pwm, MAX_SPEED);
 630:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <left_motor_pwm>
 634:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <left_motor_pwm+0x1>
	ICR1 = period;
 638:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 63c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	(channel == CH_B) ? (OCR1B = onTime) : (OCR1A = onTime);
 640:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 644:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 648:	48 cf       	rjmp	.-368    	; 0x4da <__FUSE_REGION_LENGTH__+0xda>

0000064a <main>:
#include <util/delay.h>
#include "motor_control.h"

int main(void){

	setupPWM();
 64a:	0e 94 48 00 	call	0x90	; 0x90 <setupPWM>
	setupMotor();
 64e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <setupMotor>
	initIR();
 652:	0e 94 7e 00 	call	0xfc	; 0xfc <initIR>
	init_SRF05();
 656:	0e 94 06 01 	call	0x20c	; 0x20c <init_SRF05>
	SRF05_Start();
 65a:	0e 94 14 01 	call	0x228	; 0x228 <SRF05_Start>

	while(1){
		controlMotor();
 65e:	0e 94 90 01 	call	0x320	; 0x320 <controlMotor>
 662:	fd cf       	rjmp	.-6      	; 0x65e <main+0x14>

00000664 <__udivmodhi4>:
 664:	aa 1b       	sub	r26, r26
 666:	bb 1b       	sub	r27, r27
 668:	51 e1       	ldi	r21, 0x11	; 17
 66a:	07 c0       	rjmp	.+14     	; 0x67a <__udivmodhi4_ep>

0000066c <__udivmodhi4_loop>:
 66c:	aa 1f       	adc	r26, r26
 66e:	bb 1f       	adc	r27, r27
 670:	a6 17       	cp	r26, r22
 672:	b7 07       	cpc	r27, r23
 674:	10 f0       	brcs	.+4      	; 0x67a <__udivmodhi4_ep>
 676:	a6 1b       	sub	r26, r22
 678:	b7 0b       	sbc	r27, r23

0000067a <__udivmodhi4_ep>:
 67a:	88 1f       	adc	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	5a 95       	dec	r21
 680:	a9 f7       	brne	.-22     	; 0x66c <__udivmodhi4_loop>
 682:	80 95       	com	r24
 684:	90 95       	com	r25
 686:	bc 01       	movw	r22, r24
 688:	cd 01       	movw	r24, r26
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
